/*
Copyright Â© 2023 Arjen Schwarz <developer@arjen.eu>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
package cmd

import (
	"fmt"

	"github.com/spf13/cobra"
)

// DeployFlags groups all flags used by the deploy command
type DeployFlags struct {
	StackName       string
	Template        string
	Parameters      string
	Tags            string
	Bucket          string
	ChangesetName   string
	Dryrun          bool
	NonInteractive  bool
	CreateChangeset bool
	DeployChangeset bool
	DefaultTags     bool
	DeploymentFile  string
}

// Validate validates the deploy flags
func (f *DeployFlags) Validate() error {
	if f.StackName == "" {
		return fmt.Errorf("stack name is required")
	}

	if f.DeploymentFile != "" && (f.Template != "" || f.Parameters != "" || f.Tags != "") {
		return fmt.Errorf("you can't provide a deployment file and other parameters at the same time")
	}

	return nil
}

// RegisterFlags registers all deploy flags to the given command
func (f *DeployFlags) RegisterFlags(cmd *cobra.Command) {
	cmd.Flags().StringVarP(&f.StackName, "stackname", "n", "", "The name for the stack")
	cmd.Flags().StringVarP(&f.Template, "template", "f", "", "The filename for the template")
	cmd.Flags().StringVarP(&f.Parameters, "parameters", "p", "", "The file(s) containing the parameter values, comma-separated for multiple")
	cmd.Flags().StringVarP(&f.Tags, "tags", "t", "", "The file(s) containing the tags, comma-separated for multiple")
	cmd.Flags().StringVarP(&f.Bucket, "bucket", "b", "", "The S3 bucket where the template should be uploaded to (optional)")
	cmd.Flags().StringVarP(&f.ChangesetName, "changeset", "c", "", "The name of the changeset, when not provided it will be autogenerated")
	cmd.Flags().BoolVar(&f.Dryrun, "dry-run", false, "Do a dry run: create the changeset and immediately delete")
	cmd.Flags().BoolVar(&f.NonInteractive, "non-interactive", false, "Run in non-interactive mode: automatically approve the changeset and deploy")
	cmd.Flags().BoolVar(&f.CreateChangeset, "create-changeset", false, "Only create a change set")
	cmd.Flags().BoolVar(&f.DeployChangeset, "deploy-changeset", false, "Deploy a specific change set")
	cmd.Flags().BoolVar(&f.DefaultTags, "default-tags", true, "Add any default tags that are specified in your config file")
	cmd.Flags().StringVarP(&f.DeploymentFile, "deployment-file", "d", "", "The file to use for the deployment")
}

// DriftFlags groups all flags used by the drift command
type DriftFlags struct {
	StackName          string
	ResultsOnly        bool
	SeparateProperties bool
	IgnoreTags         string
}

// RegisterFlags registers all drift flags to the given command
func (f *DriftFlags) RegisterFlags(cmd *cobra.Command) {
	cmd.Flags().StringVarP(&f.StackName, "stackname", "n", "", "The name of the stack")
	cmd.Flags().BoolVarP(&f.ResultsOnly, "results-only", "r", false, "Don't trigger a new drift detection")
	cmd.Flags().BoolVarP(&f.SeparateProperties, "separate-properties", "s", false, "Put every property on its own line")
	cmd.Flags().StringVarP(&f.IgnoreTags, "ignore-tags", "i", "", "Comma separated list of tags to ignore, additional to any configured in the config file")
}

// DescribeFlags groups all flags used by the describe command
type DescribeFlags struct {
	StackName     string
	ChangesetName string
	ChangesetUrl  string
}

// RegisterFlags registers all describe flags to the given command
func (f *DescribeFlags) RegisterFlags(cmd *cobra.Command) {
	cmd.PersistentFlags().StringVarP(&f.StackName, "stackname", "n", "", "The name for the stack")
}

// DependenciesFlags groups all flags used by the dependencies command
type DependenciesFlags struct {
	StackName string
}

// RegisterFlags registers all dependencies flags to the given command
func (f *DependenciesFlags) RegisterFlags(cmd *cobra.Command) {
	cmd.Flags().StringVarP(&f.StackName, "stackname", "n", "", "Name, ID, or wildcard filter for the stack (optional)")
}

// ExportsFlags groups all flags used by the exports command
type ExportsFlags struct {
	StackName  string
	ExportName string
}

// RegisterFlags registers all exports flags to the given command
func (f *ExportsFlags) RegisterFlags(cmd *cobra.Command) {
	cmd.Flags().StringVarP(&f.StackName, "stackname", "n", "", "Name, ID, or wildcard filter for the stack (optional)")
	cmd.Flags().StringVarP(&f.ExportName, "export", "e", "", "Filter for the export name")
}

// HistoryFlags groups all flags used by the history command
type HistoryFlags struct {
	StackName string
}

// RegisterFlags registers all history flags to the given command
func (f *HistoryFlags) RegisterFlags(cmd *cobra.Command) {
	cmd.Flags().StringVarP(&f.StackName, "stackname", "n", "", "(Optional) The name of the stack to filter by")
}

// ReportFlags groups all flags used by the report command
type ReportFlags struct {
	StackName    string
	Outputfile   string
	TargetBucket string
	LatestOnly   bool
	FrontMatter  bool
	HasMermaid   bool
}

// RegisterFlags registers all report flags to the given command
func (f *ReportFlags) RegisterFlags(cmd *cobra.Command) {
	cmd.Flags().StringVarP(&f.StackName, "stackname", "n", "", "The name for the stack")
	cmd.Flags().BoolVar(&f.LatestOnly, "latest", false, "Only show the latest event")
	cmd.Flags().StringVar(&f.TargetBucket, "s3bucket", "", "Optional s3 bucket the output should be saved to. Filename is autogenerated (stackname/date.extension)")
	cmd.Flags().BoolVar(&f.FrontMatter, "frontmatter", false, "Add frontmatter to the report. Only works for single events. Markdown only.")
}

// ResourcesFlags groups all flags used by the resources command
type ResourcesFlags struct {
	StackName string
}

// RegisterFlags registers all resources flags to the given command
func (f *ResourcesFlags) RegisterFlags(cmd *cobra.Command) {
	cmd.Flags().StringVarP(&f.StackName, "stackname", "n", "", "Name, ID, or wildcard filter for the stack (optional)")
}
