/*
Copyright Â© 2023 Arjen Schwarz <developer@arjen.eu>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
package cmd

import (
	"fmt"

	"github.com/ArjenSchwarz/fog/lib"
	format "github.com/ArjenSchwarz/go-output"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// templateCmd represents the template command
var templateCmd = &cobra.Command{
	Use:   "template",
	Short: "A brief description of your command",
	Long: `A longer description that spans multiple lines and likely contains examples
and usage of using your command. For example:

Cobra is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Cobra application.`,
	Run: describeTemplate,
}

func describeTemplate(cmd *cobra.Command, args []string) {
	viper.Set("output", "table") //Enforce table output for deployments
	outputsettings = settings.NewOutputSettings()
	outputsettings.SeparateTables = true //Make table output stand out more
	templatestring, _, _ := lib.ReadTemplate(describe_Template)
	template := lib.ParseTemplateString(templatestring, nil)

	stacktitle := "CloudFormation stack information"
	keys := []string{"Name", "Value"}
	output := format.OutputArray{Keys: keys, Settings: outputsettings}
	output.Settings.Title = stacktitle
	content := nameValueContent("Description", template.Description)
	output.AddContents(content)
	content = nameValueContent("AWSTemplateFormatVersion", template.AWSTemplateFormatVersion)
	output.AddContents(content)
	if template.Transform != nil {
		content = nameValueContent("Transform", template.Transform.Value())
		output.AddContents(content)
	}
	output.AddToBuffer()

	paramTitle := "Parameters"
	paramkeys := []string{"Name", "Description", "Type", "Default value"}
	parameterOutput := format.OutputArray{Keys: paramkeys, Settings: outputsettings}
	parameterOutput.Settings.Title = paramTitle
	parameterOutput.Settings.SortKey = "Name"
	for key, value := range template.Parameters {
		// get actual value from the stack
		content := make(map[string]interface{})
		content["Name"] = key
		content["Description"] = value.Description
		content["Type"] = value.Type
		content["Default value"] = value.Default
		parameterOutput.AddContents(content)
	}
	if parameterOutput.Contents != nil {
		parameterOutput.AddToBuffer()
	}

	rulesTitle := "Rules"
	ruleskeys := []string{"Name", "Value"}
	rulesOutput := format.OutputArray{Keys: ruleskeys, Settings: outputsettings}
	rulesOutput.Settings.Title = rulesTitle
	for key, value := range template.Rules {
		// get actual value from the stack
		content := nameValueContent(key, value)
		rulesOutput.AddContents(content)
	}
	if rulesOutput.Contents != nil {
		rulesOutput.AddToBuffer()
	}

	conditionTitle := "Conditions"
	conditionKeys := []string{"Name", "Active with default parameters"}
	conditionOutput := format.OutputArray{Keys: conditionKeys, Settings: outputsettings}
	conditionOutput.Settings.Title = conditionTitle
	conditionOutput.Settings.SortKey = "Name"
	for key, value := range template.Conditions {
		content := make(map[string]interface{})
		content["Name"] = key
		content["Active with default parameters"] = value
		conditionOutput.AddContents(content)
	}
	if conditionOutput.Contents != nil {
		conditionOutput.AddToBuffer()
	}

	resourceTitle := "Resources"
	resourceKeys := []string{"Name", "Type", "Conditions", "Should have resource"}
	resourceOutput := format.OutputArray{Keys: resourceKeys, Settings: outputsettings}
	resourceOutput.Settings.Title = resourceTitle
	resourceOutput.Settings.SortKey = "Type"
	for key, value := range template.Resources {
		content := make(map[string]interface{})
		content["Name"] = key
		content["Type"] = value.Type
		content["Conditions"] = value.Condition
		content["Should have resource"] = template.ShouldHaveResource(value)
		resourceOutput.AddContents(content)
	}
	resourceOutput.AddToBuffer()

	outputTitle := "Outputs"
	outputKeys := []string{"Name", "Description", "Value", "Export"}
	outputOutput := format.OutputArray{Keys: outputKeys, Settings: outputsettings}
	outputOutput.Settings.Title = outputTitle
	outputOutput.Settings.SortKey = "Type"
	for key, value := range template.Outputs {
		content := make(map[string]interface{})
		content["Name"] = key
		content["Description"] = value.Description
		content["Value"] = fmt.Sprintf("%s", value.Value) //value.Value
		content["Export"] = value.Export.Name
		outputOutput.AddContents(content)
	}
	if outputOutput.Contents != nil {
		outputOutput.AddToBuffer()
	}

	output.Write()
}

func init() {
	describeCmd.AddCommand(templateCmd)
	describe_Template = templateCmd.Flags().StringP("template", "f", "", "The filename for the template")
}
